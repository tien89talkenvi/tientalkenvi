import streamlit as st  # streamlit=1.47.1
import pandas as pd     # pandas=2.3.1
import os, time, json, random

from selenium import webdriver  # selenium=4.34.2
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC

import shutil
from openpyxl import Workbook, load_workbook    # openpyxl=3.1.5
from openpyxl.styles import PatternFill
from io import BytesIO
import xlsxwriter   # xlsxwriter=3.2.5
import tempfile
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np


import socket

start_time = time.time()  # B·∫Øt ƒë·∫ßu t√≠nh gi·ªù

#from playwright.sync_api import sync_playwright    #playwright==1.54.0
#--------------------------------------------------------------

# Cac Ham Phu --------------------------------------------------
# Ham thu viec doc file txt/cvs dung encoding nao khong gay loi
def check_read_file_txt(filetxt):
    encodings_to_try = ['utf-8', 'utf-8-sig', 'cp1252', 'cp1258', 'utf-16']

    for enc in encodings_to_try:
        try:
            df = pd.read_csv('file.txt', delimiter='\t', encoding=enc)
            print(f"‚úÖ Th√†nh c√¥ng v·ªõi encoding: {enc}")
            break
        except Exception as e:
            print(f"‚ùå {enc}: {e}")

# H√†m ki·ªÉm tra gi√° tr·ªã c√≥ ph·∫£i s·ªë ho·∫∑c ng√†y kh√¥ng
def is_number_or_date(val):
    if pd.isna(val):  # NaN th√¨ gi·ªØ l·∫°i
        return False
    # Tr∆∞·ªùng h·ª£p l√† s·ªë th·∫≠t
    if isinstance(val, (int, float)):
        return True
    # N·∫øu l√† chu·ªói
    if isinstance(val, str):
        # N·∫øu chu·ªói to√†n s·ªë ho·∫∑c d·∫°ng s·ªë th·∫≠p ph√¢n
        if val.strip().replace('.', '', 1).isdigit():
            return True
        # Th·ª≠ parse sang datetime
        try:
            datetime.strptime(val.strip(), '%Y-%m-%d')
            return True
        except ValueError:
            pass
        try:
            datetime.strptime(val.strip(), '%d/%m/%Y')
            return True
        except ValueError:
            pass
        try:
            datetime.strptime(val.strip(), '%m-%d-%y')
            return True
        except ValueError:
            pass
    return False

# Cac Ham Cho Phan III --------------------------------------------------

def Ht_Data_tquat(outputIo):
    st.write('Ht_Data_tquat')
    wb = load_workbook(outputIo)
    ws = wb.active
    # xu li wb, ws o day
    # roi save ra file excel de xem
    # Ghi v√†o memory (kh√¥ng ghi ra ·ªï ƒëƒ©a)
    virtual_workbook = BytesIO()
    wb.save(virtual_workbook)
    
    st.download_button(
        label="T·∫£i file Excel v·ªÅ xem",
        data=virtual_workbook.getvalue(),
        file_name="Data_0.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    return 

def Ht_Data_sxep(outputIo):
    st.write('Ht_Data_sxep')
    wb = load_workbook(outputIo)
    ws = wb.active
    # xu li wb, ws o day
    # roi save ra file excel de xem
    virtual_workbook = BytesIO()
    wb.save(virtual_workbook)
    
    st.download_button(
        label="T·∫£i file Excel v·ªÅ xem",
        data=virtual_workbook.getvalue(),
        file_name="Data_0.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    return 

def Ht_Data_new(outputIo):
    st.write('Ht_Data_new')
    wb = load_workbook(outputIo)
    ws = wb.active
    # xu li wb, ws o day
    # roi save ra file excel de xem
    virtual_workbook = BytesIO()
    wb.save(virtual_workbook)
    
    st.download_button(
        label="T·∫£i file Excel v·ªÅ xem",
        data=virtual_workbook.getvalue(),
        file_name="Data_0.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    return 

def Ht_Data_old(outputIo):
    st.write('Ht_Data_old')
    wb = load_workbook(outputIo)
    ws = wb.active
    # xu li wb, ws o day
    # roi save ra file excel de xem
    virtual_workbook = BytesIO()
    wb.save(virtual_workbook)
    
    st.download_button(
        label="T·∫£i file Excel v·ªÅ xem",
        data=virtual_workbook.getvalue(),
        file_name="Data_0.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    return 

def Ht_Data_max(outputIo):
    st.write('Ht_Data_max')
    wb = load_workbook(outputIo)
    ws = wb.active
    # xu li wb, ws o day
    # roi save ra file excel de xem
    virtual_workbook = BytesIO()
    wb.save(virtual_workbook)
    
    st.download_button(
        label="T·∫£i file Excel v·ªÅ xem",
        data=virtual_workbook.getvalue(),
        file_name="Data_0.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    return 




# Ham tai file txt du lieu dang cvs cua cac mien thuoc bang Cali
@st.cache_data
def download_data_smarts(regions):
    #xoa thu muc downloads va tao lai de chi chua 2 file du lieu
    folder_path_cu = 'downloads'
    # X√≥a th∆∞ m·ª•c n·∫øu t·ªìn t·∫°i
    if os.path.exists(folder_path_cu):
        shutil.rmtree(folder_path_cu)  # X√≥a to√†n b·ªô th∆∞ m·ª•c v√† n·ªôi dung b√™n trong

    download_dir = os.path.abspath("downloads")
    os.makedirs(download_dir, exist_ok=True)

    # ‚úÖ C·∫§U H√åNH CHROME:
    options = webdriver.ChromeOptions()
    prefs = {
        "download.default_directory": download_dir,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True,
        "profile.default_content_setting_values.automatic_downloads": 1   # D√íNG QUAN TR·ªåNG DE TAT THONG BAO
    }
    options.add_experimental_option("prefs", prefs)
    options.add_argument("--headless")  # ch·∫°y ·∫©n tr√¨nh duy·ªát

    # ‚úÖ KH·ªûI T·∫†O TR√åNH DUY·ªÜT
    driver = webdriver.Chrome(options=options)

    driver.get("https://smarts.waterboards.ca.gov/smarts/SwPublicUserMenu.xhtml")
    print("‚úÖ V√†o trang ch√≠nh")

    WebDriverWait(driver, 15).until(
        EC.element_to_be_clickable((By.LINK_TEXT, "Download NOI Data By Regional Board"))
    ).click()

    WebDriverWait(driver, 10).until(lambda d: len(d.window_handles) > 1)
    driver.switch_to.window(driver.window_handles[-1])
    print("‚úÖ ƒê√£ chuy·ªÉn sang tab m·ªõi")

    links = [
        "Industrial Application Specific Data",
        "Industrial Ad Hoc Reports - Parameter Data",
        "Industrial Annual Reports"
    ]

    def wait_for_download_and_get_new_file(before_files, timeout=40):
        for _ in range(timeout * 2):
            time.sleep(0.5)
            after_files = set(os.listdir(download_dir))
            new_files = after_files - before_files
            txt_files = [f for f in new_files if f.endswith(".txt")]
            if txt_files:
                return txt_files[0]
        return None
    #---------------------
    region = regions
    print(f"\nüîπ Ch·ªçn Region: {region}")
    dropdown = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.NAME, "intDataFileDowloaddataFileForm:intDataDumpSelectOne"))
    )
    Select(dropdown).select_by_visible_text(region)
    time.sleep(3)  # ƒê·ª£i dropdown load l·∫°i
    
    lfile_datai = []

    for j, name in enumerate(links):
        try:
            print(f"üì• ƒêang click t·∫£i: {name}")
            before = set(os.listdir(download_dir))

            link_elem = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.LINK_TEXT, name))
            )
            driver.execute_script("arguments[0].click();", link_elem)

            fname = wait_for_download_and_get_new_file(before)
            if fname:
                # T·∫°o t√™n file chu·∫©n theo Region + t√™n file
                src = os.path.join(download_dir, fname)
                dst_name = f"{region} - {name}.txt"
                dst_name = dst_name.replace(" ", "_")  # N·∫øu mu·ªën
                dst = os.path.join(download_dir, dst_name)
                os.rename(src, dst)
                print(f"File ƒë√£ l∆∞u: {dst}")
                lfile_datai.append(f"{dst}")
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y file m·ªõi sau khi t·∫£i")
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i {name} ·ªü Region {region}: {e}")

    driver.quit()
    print("\nüéâ Ho√†n t·∫•t t·∫£i file cho "+region)
    return lfile_datai
    # CHU Y rang neu ten file dat trung voi file da co thi that bai.

# CAC HAM CHINH-----------------------------------------------------
def ThucThiPhan_4():
    return    


@st.cache_data
def Doc_hthi_data(uploaded_file):
    try:
        # ƒê·ªçc file Excel th√†nh DataFrame
        df = pd.read_excel(uploaded_file, sheet_name='Data')

        # 1. S·∫Øp x·∫øp d·ªØ li·ªáu theo nhi·ªÅu c·∫•p ƒë·ªô (multi-level sort):
        df_sorted = df.sort_values(
                by=["OLD/NEW", "PARAMETER", "RESULT"],
                ascending=[True, True, False]
        )
        # 2. L·ªçc d·ªØ li·ªáu c√≥ OLD/NEW == 'New':
        df_new = df_sorted[df_sorted["OLD/NEW"] == "New"]
        # 3. T√¥ m√†u (highlight) exceedances th√¨ kh√¥ng th·ªÉ hi·ªÉn th·ªã trong DataFrame th√¥ng th∆∞·ªùng nh∆∞ng c√≥ th·ªÉ d√πng:
        # pandas.ExcelWriter + openpyxl ƒë·ªÉ ghi file Excel c√≥ m√†u.
        # Ho·∫∑c ƒë∆°n gi·∫£n ch·ªâ ƒë√°nh d·∫•u b·∫±ng c·ªôt m·ªõi "Exceed" = True/False
        # 4. So s√°nh k·∫øt qu·∫£ v·ªõi ng∆∞·ª°ng NAL/NEL/TNAL:
        # tao dic chua nguong
        nal_thresholds = {
            "Ammonia": 4.7,
            "Cadmium": 0.0031,
            "Copper": 0.06749,
            # v.v...
        }
        # R·ªìi ki·ªÉm tra:
        def is_exceed(row):
            param = row["PARAMETER"]
            result = row["RESULT"]
            return result > nal_thresholds.get(param, float('inf'))
        
        df_new["EXCEED"] = df_new.apply(is_exceed, axis=1)
        # 5. Ghi ch√∫ c√°c facility c·∫ßn theo d√µi ‚Üí b·∫°n c√≥ th·ªÉ l·ªçc ho·∫∑c th√™m c·ªôt "Flagged" d·ª±a v√†o danh s√°ch th·ªß c√¥ng.


        st.success(f"ƒê√£ t·∫£i l√™n: {uploaded_file.name}")
        st.subheader("üìÑ D·ªØ li·ªáu t·ª´ file:")

        # B∆∞·ªõc 3: Hi·ªÉn th·ªã DataFrame v·ªõi cu·ªôn d·ªçc (gi·∫£ l·∫≠p 3 d√≤ng)
        st.dataframe(df) #, height=120, use_container_width=True)

    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {e}")
    
def Ht_CaiMuonXem_0(tepxlsx):
    # 1.ƒê·ªçc file Excel th√†nh DataFrame
    df = pd.read_excel(tepxlsx, sheet_name='Data')
    # 2. S·∫Øp x·∫øp d·ªØ li·ªáu theo nhi·ªÅu c·∫•p ƒë·ªô (multi-level sort):
    df_sorted = df.sort_values(
        by=["OLD/NEW", "PARAMETER", "RESULT"],
        ascending=[True, True, False]
    )
    #Dua vao xlsx de xem kq sx
    
    tepxlsxdexem = "Data_Tracker_3-1.xlsx"
    df_sorted.to_excel(tepxlsxdexem, sheet_name='Datanew', index=False)
    os.startfile(tepxlsxdexem)

#---------------------------------
def Ht_CaiMuonXem_1(uploaded_file):
    uploaded_file = st.file_uploader("T·∫£i l√™n Data_Tracker_New.xlsx", type=["xlsx"])
    if uploaded_file:
        df = pd.read_excel(uploaded_file)
        # Ghi t·∫°m ra file Excel ƒë·ªÉ x·ª≠ l√Ω openpyxl
        output = BytesIO()
        df.to_excel(output, index=False)
        output.seek(0)

        # Load v√† t√¥ m√†u
        wb = load_workbook(output)
        ws = wb.active

        # T√¨m v·ªã tr√≠ c√°c c·ªôt "OLD/NEW" v√† "COSO"
        header = [cell.value for cell in ws[1]]

        try:
            old_new_col_idx = header.index("OLD/NEW") + 1
            coso_col_idx = header.index("FACILITY_NAME") + 1
        except ValueError as e:
            raise Exception(f"Kh√¥ng t√¨m th·∫•y c·ªôt: {e}")

        # T√¥ m√†u v√†ng cho d√≤ng 'new' thu·ªôc c∆° s·ªü 'CS1'
        yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")

        # Duy·ªát t·ª´ng d√≤ng
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
            old_new_val = str(row[old_new_col_idx - 1].value).strip().lower() if row[old_new_col_idx - 1].value else ""
            coso_val = str(row[coso_col_idx - 1].value).strip() if row[coso_col_idx - 1].value else ""

            if old_new_val == "old" and coso_val == 'CS1':
                for cell in row:
                    cell.fill = yellow_fill
                # D√≤ng n√†y ƒë∆∞·ª£c gi·ªØ l·∫°i
            else:
                # ·∫®n d√≤ng kh√¥ng kh·ªõp ƒëi·ªÅu ki·ªán
                ws.row_dimensions[row[0].row].hidden = True

        # L∆∞u file m·ªõi
        # Ghi v√†o memory (kh√¥ng ghi ra ·ªï ƒëƒ©a)
        virtual_workbook = BytesIO()
        wb.save(virtual_workbook)

        st.download_button(
            label="T·∫£i file Excel",
            data=virtual_workbook.getvalue(),
            file_name="data_tracker_1.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

        #wb.save("filtered_CS1_new.xlsx")
        #st.write('filtered_CS1_new.xlsx da co')        
        #os.startfile("filtered_CS1_new.xlsx")

        # L∆∞u l·∫°i v√† cho ph√©p t·∫£i xu·ªëng
        #final_output = BytesIO()
        #wb.save(final_output)
        #final_output.seek(0)

        #st.download_button("üì• T·∫£i file ƒë√£ t√¥ m√†u", final_output, "T_to_mau.xlsx")


# ---- phuc vu cho ThucThiPhan_2()------------------
@st.cache_data
def Combined_to_data_tracker(uploaded_tracker):
    try:
        # Read input files
        sheet1 = pd.read_excel(uploaded_tracker, sheet_name='Sheet1', header=None, dtype=str)
        sheet2 = pd.read_excel(uploaded_tracker, sheet_name='Sheet2', dtype=str)
        df_tracker = pd.read_excel(uploaded_tracker, sheet_name='Data', dtype=str)

        # Clean Sheet1
        cols_to_delete = list(range(15, 28)) + list(range(31, 38)) + [0, 4, 5, 6, 7, 11]
        # Ch·ªâ l·∫•y c√°c ch·ªâ s·ªë c·ªôt c·∫ßn x√≥a, nh∆∞ng ph·∫£i nh·ªè h∆°n num_cols
        num_cols = sheet1.shape[1]
        cols_to_delete = [col for col in cols_to_delete if col < num_cols]
        sheet1_cleaned = sheet1.drop(sheet1.columns[cols_to_delete], axis=1)

        sheet1_cleaned.columns = sheet1_cleaned.iloc[0]
        sheet1_cleaned = sheet1_cleaned[1:]

        # Reorder columns
        cols = list(sheet1_cleaned.columns)
        if 'WDID' in cols and 'APP_ID' in cols:
            cols.remove('WDID')
            cols.insert(cols.index('APP_ID'), 'WDID')
        if 'FACILITY_NAME' in cols and 'OPERATOR_NAME' in cols:
            cols.remove('FACILITY_NAME')
            cols.insert(cols.index('OPERATOR_NAME'), 'FACILITY_NAME')
        sheet1_cleaned = sheet1_cleaned[cols]


        # Clean Sheet2 and merge SIC data
        sheet2_cleaned = sheet2.drop(sheet2.columns[2:8], axis=1)
        sheet2_cleaned = sheet2_cleaned.iloc[:, :5]  # Ch·ªâ l·∫•y 5 c·ªôt ƒë·∫ßu ti√™n
        sheet2_cleaned.columns = ['A', 'APP_ID', 'PRIMARY_SIC', 'SECONDARY_SIC', 'TERTIARY_SIC']
        sheet2_cleaned = sheet2_cleaned[['APP_ID', 'PRIMARY_SIC', 'SECONDARY_SIC', 'TERTIARY_SIC']]
        merged = pd.merge(sheet1_cleaned, sheet2_cleaned, on='APP_ID', how='left')
        merged = merged.rename(columns={'PRIMARY_SIC': '1', 'SECONDARY_SIC': '2', 'TERTIARY_SIC': '3'})
        merged['2'] = merged['2'].replace('0', pd.NA)
        merged['3'] = merged['3'].replace('0', pd.NA)
        merged['OLD/NEW'] = 'new'

        # Add "Old" tag to tracker and combine
        df_tracker['OLD/NEW'] = 'old'
        df_combined = pd.concat([df_tracker, merged], ignore_index=True)

        # Export to Excel in-memory
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_combined.to_excel(writer, sheet_name='Data', index=False)
        output.seek(0)
        return output 
    except Exception as e:
        st.error(f"‚ö†Ô∏è An error occurred: {e}")
#----------------

@st.cache_data
def Txt_to_data_tracker(df1, df2, df_data):
    # tao file excel ao xlsx_ao_chua_3df chua df1, df2, df_data
    xlsx_ao_chua_3df = BytesIO()
    with pd.ExcelWriter(xlsx_ao_chua_3df, engine="openpyxl") as writer:
        df1.to_excel(writer, sheet_name="Sheet1", index=False)
        df2.to_excel(writer, sheet_name="Sheet2", index=False)
        df_data.to_excel(writer, sheet_name="Data", index=False)

    xlsx_ao_chua_3df.seek(0)
    return xlsx_ao_chua_3df
    # tao nut download file tren neu can
    #st.download_button("üì• Download Data_Tracker_include_3df.xlsx",
    #    data=xlsx_ao_chua_3df,
    #    file_name="Data_Tracker_include_3df.xlsx",
    #    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    #)

# Cac ham Phan II -----------------------------    
# ham nay de In Sheet2, T√¨m c√°c d√≤ng APP_ID tr√πng, 
# r·ªìi x√≥a c√°c d√≤ng m√† STATUS ‚â† Active nh∆∞ng gi·ªØ l·∫°i c√°c d√≤ng c√≥ STATUS = Active "
def Xli_P2_1(F_excel_data_ao):
    F_excel_data_ao.seek(0)  # quay l·∫°i ƒë·∫ßu BytesIO ƒë·ªÉ ƒë·ªçc
    dfSheet2 = pd.read_excel(F_excel_data_ao, sheet_name='Sheet2')
    # T√¨m APP_ID b·ªã tr√πng
    duplicates = dfSheet2[dfSheet2.duplicated(subset='APP_ID', keep=False)]
    # Gi·ªØ l·∫°i d√≤ng tr√πng c√≥ STATUS kh√°c "Active"
    to_delete = duplicates[duplicates['STATUS'] != 'Active']
    # Xo√° c√°c d√≤ng n√†y kh·ªèi dataframe g·ªëc (chu y la file excel van y cu)
    dfSheet2_cleaned = dfSheet2.drop(to_delete.index)
    # ket qua la cac dong trung APP_ID nhung co STATUS la Active duoc giu lai, con
    # cac dong trung APP_ID nhung co STATUS khac Active thi bi xoa
    # cho hien thi df con lai sau khi da xoa cac to_delete
    # phai hieu df_cleaned la df con lai sau khi da lam sach 
    #st.write(df_cleaned)
    #---
    if st.checkbox("View Sheet2_1", key='BCB1'):
        st.write('(rows, cols) = ', len(dfSheet2_cleaned), len(dfSheet2_cleaned.columns))
        st.write(dfSheet2_cleaned)

    # Ghi th√™m dfnew v√†o Sheet2 m√† kh√¥ng m·∫•t Sheet1
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet2_cleaned.to_excel(writer, sheet_name="Sheet2", index=False)
    # Gi·ªù output c√≥ c·∫£ Sheet1 v√† Sheet2
    F_excel_data_ao.seek(0)
    return F_excel_data_ao

# ham nay de Delete, move, re-order columns in Sheet2
def Xli_P2_2(F_excel_data_ao):
    # set dfSheet2 is dataframe of  Sheet2 in uploaded_f3
    dfSheet2 = pd.read_excel(F_excel_data_ao, sheet_name='Sheet2')
    # xoa cac cot AF den AL: 
    # loai bo cac cot trong [] va tra ve kq dfSheet2_cleaned la data con lai
    dfSheet2_cleaned = dfSheet2.drop(['RECEIVING_WATER_NAME','INDIRECTLY',
        'DIRECTLY','CERTIFIER_BY','CERTIFIER_TITLE','CERTIFICATION_DATE',
        'QUESTION_TMDL_ANSWER'],axis=1)
    # tiep tuc loai bo cac cot P den AB:
    dfSheet2_cleaned = dfSheet2_cleaned.drop(['FACILITY_LATITUDE','FACILITY_LONGITUDE',
    	'FACILITY_COUNTY','FACILITY_CONTACT_FIRST_NAME','FACILITY_CONTACT_LAST_NAME',
        'FACILITY_TITLE','FACILITY_PHONE','FACILITY_EMAIL',	'FACILITY_TOTAL_SIZE',
        'FACILITY_TOTAL_SIZE_UNIT',	'FACILITY_AREA_ACTIVITY','FACILITY_AREA_ACTIVITY_UNIT',
        'PERCENT_OF_SITE_IMPERVIOUSNESS'],axis=1)
    # tiep tuc loai bo cac cot A,E-H,L:
    dfSheet2_cleaned = dfSheet2_cleaned.drop(['PERMIT_TYPE','NOI_PROCESSED_DATE',
        'NOT_EFFECTIVE_DATE','REGION_BOARD','COUNTY', 'FACILITY_ADDRESS_2'],axis=1)
    # di chuyen cot WDID sang ben trai cot APP_ID
    cols = list(dfSheet2_cleaned.columns)
    if 'WDID' in cols and 'APP_ID' in cols:
        cols.remove('WDID')
        cols.insert(cols.index('APP_ID'), 'WDID')
    # tiep tuc di chuyen cot FACILITY_NAME sang ben trai cot OPERATOR_NAME
    if 'FACILITY_NAME' in cols and 'OPERATOR_NAME' in cols:
        cols.remove('FACILITY_NAME')
        cols.insert(cols.index('OPERATOR_NAME'), 'FACILITY_NAME')
    dfSheet2_cleaned = dfSheet2_cleaned[cols]
    # cu·ªëi c√πng ph·∫£i c√≤n l·∫°i l√† :
    # WDID	APP_ID	STATUS	FACILITY_NAME	OPERATOR_NAME	FACILITY_ADDRESS	FACILITY_CITY	FACILITY_STATE	FACILITY_ZIP	PRIMARY_SIC	SECONDARY_SIC	TERTIARY_SIC

    if st.checkbox("View Sheet2_2", key='BCB2'):
        st.write('(rows, cols) = ', len(dfSheet2_cleaned), len(dfSheet2_cleaned.columns))
        st.write(dfSheet2_cleaned)

    # Ghi cap nhat Sheet2
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet2_cleaned.to_excel(writer, sheet_name="Sheet2", index=False)
    F_excel_data_ao.seek(0)
    return F_excel_data_ao

# ham nay de In Sheet1, delete all rows duplicated and rows showing '4 56' in WDID
def Xli_P2_3(F_excel_data_ao):
    dfSheet1 = pd.read_excel(F_excel_data_ao, sheet_name='Sheet1')
    # drop all duplicated row
    dfSheet1_cleaned = dfSheet1.drop_duplicates()
    # x√≥a c√°c d√≤ng m√† c·ªôt 'WDID' ch·ª©a ch√≠nh x√°c chu·ªói "4 56", c√≤n l·∫°i c√°c d√≤ng ['WDID'] != '4 56'
    dfSheet1_cleaned = dfSheet1_cleaned[dfSheet1_cleaned['WDID'] != '4 56']
    # Delete all columns not in your tracker (columns A, J, K, U, X, and Y)
    dfSheet1_cleaned = dfSheet1_cleaned.drop(['PERMIT_TYPE', 'MONITORING_LATITUDE', 
        'MONITORING_LONGITUDE', 'ANALYTICAL_METHOD', 'DISCHARGE_END_DATE',	
        'DISCHARGE_END_TIME'],axis=1)
    #After deleting these columns, Sheet1 columns should look like the following: 
    # A ‚Äì WDID; B ‚Äì App ID; C ‚Äì Status; D ‚Äì Facility Name; E ‚Äì Operator Name; F ‚ÄìAddress; G ‚Äì City; H ‚Äì State; I ‚Äì Zip; J ‚Äì Primary SIC; K ‚Äì Secondary SIC; L ‚Äì Tertiary SIC
    # Sheet1 khong co STATUS, vay phai nhu ben phai day:  WDID	APP_ID	REPORTING_YEAR	REPORT_ID	EVENT_TYPE	MONITORING_LOCATION_NAME	MONITORING_LOCATION_TYPE	MONITOR_LOCATION_DESCRIPTION	SAMPLE_ID	SAMPLE_DATE	SAMPLE_TIME	DISCHARGE_START_DATE	DISCHARGE_START_TIME	PARAMETER	RESULT_QUALIFIER	RESULT	UNITS	MDL	RL	CERTIFIER_NAME	CERTIFIED_DATE
    if st.checkbox("View Sheet1_3", key='BCB3'):
        st.write('(rows, cols) = ', len(dfSheet1_cleaned), len(dfSheet1_cleaned.columns))
        st.write(dfSheet1_cleaned)

    # Ghi cap nhat Sheet2
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet1_cleaned.to_excel(writer, sheet_name="Sheet1", index=False)
    F_excel_data_ao.seek(0)
    return F_excel_data_ao

# Filter Sheet1 for only new sample data
def Xli_P2_4(F_excel_data_ao):
    dfSheet1 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet1")  # ch·ª©a c·ªôt APP_ID
    dfData = pd.read_excel(F_excel_data_ao, sheet_name="Data")  # ch·ª©a c·ªôt O v√† P

    # Gi·ªëng =VLOOKUP(J2, Data!O:P, 2, FALSE)
    lookup_dict = pd.Series(dfData['PP'].values, index=dfData['OO']).to_dict()
    # T√¨m v·ªã tr√≠ (ch·ªâ s·ªë) c·ªßa c·ªôt 'APP_ID' trong Sheet1
    idx = dfSheet1.columns.get_loc('APP_ID')
    # Ch√®n c·ªôt m·ªõi 'VLOOKUP' v√†o tr∆∞·ªõc 'APP_ID'
    dfSheet1.insert(loc=idx, column='VLOOKUP', value=dfSheet1['SAMPLE_DATE'].map(lookup_dict))
    # c·ªôt 'SAMPLE_DATE' l√† c·ªôt 'J' trong c√¥ng th·ª©c =VLOOKUP(J2, Data!O:P, 2, FALSE

    # X√≥a (l·ªçc b·ªè) t·∫•t c·∫£ c√°c h√†ng c√≥ s·ªë trong c·ªôt 'VLOOKUP' 
    dfSheet1 = dfSheet1[~dfSheet1['VLOOKUP'].apply(lambda x: isinstance(x, (int, float)))]
    #dfSheet1 = dfSheet1[~dfSheet1['VLOOKUP'].apply(is_number_or_date)]
    # Gi·ªØ l·∫°i c√°c d√≤ng m√† c·ªôt 'VLOOKUP' kh√¥ng ch·ª©a s·ªë trong S√™t1
    #dfSheet1 = dfSheet1[~dfSheet1['VLOOKUP'].astype(str).str.contains(r'\d', na=False)]
    #dfSheet1 = dfSheet1[~dfSheet1['VLOOKUP'].astype(str).str.contains(r'\d', na=False)]
    # sap xep theo 'VLOOKUP' tƒÉng d·∫ßn
    #dfSheet1 = dfSheet1.sort_values(by='VLOOKUP', ascending=False)
    dfSheet1 = dfSheet1.sort_values(by='VLOOKUP', ascending=True, na_position='first')

    if st.checkbox("View Sheet1_4", key='BCB4'):
        st.write('(rows, cols) = ', len(dfSheet1), len(dfSheet1.columns))
        st.write(dfSheet1)

    # Ghi cap nhat Sheet1
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet1.to_excel(writer, sheet_name="Sheet1", index=False)
    F_excel_data_ao.seek(0)
    return F_excel_data_ao

# DN Ham Check if facilities in Sheet1 are active
def Xli_P2_5(F_excel_data_ao):
    dfSheet1 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet1")  # ch·ª©a c·ªôt APP_ID
    dfSheet2 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet2")  # ch·ª©a c·ªôt O v√† P
    # Gi·ªëng =VLOOKUP(C2,Sheet2!B:D,2,FALSE),
    lookup_dict = pd.Series(dfSheet2['STATUS'].values, index=dfSheet2['APP_ID']).to_dict()
    dfSheet1['VLOOKUP'] = dfSheet1['APP_ID'].map(lookup_dict)
    dfSheet1 = dfSheet1.sort_values(by='VLOOKUP', ascending=False)
    dfSheet1 = dfSheet1[dfSheet1['VLOOKUP'] == 'Active']

    if st.checkbox("View Sheet1_5", key='BCB5'):
        st.write('(rows, cols) = ', len(dfSheet1), len(dfSheet1.columns))
        st.write(dfSheet1)

    # X√≥a (l·ªçc b·ªè) t·∫•t c·∫£ c√°c h√†ng c√≥ s·ªë trong c·ªôt 'VLOOKUP' 
    #dfSheet1 = dfSheet1[~dfSheet1['VLOOKUP'].apply(lambda x: isinstance(x, (int, float)))]

    # Ghi cap nhat Sheet1
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet1.to_excel(writer, sheet_name="Sheet1", index=False)
    F_excel_data_ao.seek(0)
    return F_excel_data_ao

# DN Ham Choose the parameters to track in Sheet1
def Xli_P2_6(F_excel_data_ao):
    dfSheet1 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet1")  # ch·ª©a c·ªôt APP_ID
    #dfSheet2 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet2")  # ch·ª©a c·ªôt O v√† P

    # NEW tao menu de chon cac gia tri cua cot PARAMETER de lam viec 
    lpara = dfSheet1["PARAMETER"].dropna().unique().tolist()
    lgiulai = []
    popover = st.popover("Select parameter:")
    for pt in lpara:
        checked = popover.checkbox(pt, True)
        if checked:
            lgiulai.append(pt)
    # tai day list lgiulai da luu cac para chon

    # xem thu cac para da chon
    for pt in lgiulai:
        st.write(":red["+pt+"]") 

    # X√≥a c·ªôt B
    dfSheet1 = dfSheet1.drop(dfSheet1.columns[1], axis=1)

    # L·ªçc gi·ªØ c√°c dong co parameter mong mu·ªën
    dfSheet1 = dfSheet1[dfSheet1["PARAMETER"].isin(lgiulai)]

    # T√°ch PARAMETER th√†nh 2 c·ªôt PARAMETER v√† QUALIFIER
    split_cols = dfSheet1["PARAMETER"].str.split(",", n=1, expand=True)
    dfSheet1["PARAMETER"] = split_cols[0]
    param_index = dfSheet1.columns.get_loc("PARAMETER")
    dfSheet1.insert(param_index + 1, "QUALIFIER", split_cols[1])

    # xem Sheet1 da cap nhat
    if st.checkbox("View Sheet1_6", key='BCB6'):
        st.write('(rows, cols) = ', len(dfSheet1), len(dfSheet1.columns))
        st.write(dfSheet1)

    # L∆∞u l·∫°i Ghi cap nhat Sheet1
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet1.to_excel(writer, sheet_name="Sheet1", index=False)
    F_excel_data_ao.seek(0)
    return F_excel_data_ao

# DN Ham Make sure all the samples in Sheet1 are in 'mg/L' and not 'ug/L'
def Xli_P2_7(F_excel_data_ao):
    dfSheet1 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet1")  
    # Chuy·ªÉn ƒë·ªïi t·ª´ ug/L sang mg/L
    mask_ug = dfSheet1["UNITS"] == "ug/L"
    dfSheet1.loc[mask_ug, "RESULT"] = dfSheet1.loc[mask_ug, "RESULT"] / 1000
    dfSheet1.loc[mask_ug, "UNITS"] = "mg/L"

    if st.checkbox("View Sheet1_7", key='BCB7'):
        st.write('(rows, cols) = ', len(dfSheet1), len(dfSheet1.columns))
        st.write(dfSheet1)

    # L∆∞u l·∫°i Ghi cap nhat Sheet1
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet1.to_excel(writer, sheet_name="Sheet1", index=False)
    F_excel_data_ao.seek(0)
    return F_excel_data_ao

def Xli_P2_8(F_excel_data_ao):
    dfSheet1 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet1")  
    dfSheet2 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet2")
    
    # Xoa c·ªôt C trong Sheet2
    dfSheet2 = dfSheet2.drop(dfSheet2.columns[2], axis=1)

    # T·∫°o b·∫£ng tra c·ª©u gi·ªëng v√πng Sheet2 t·ª´ APP_ID
    lookup_cols = ["FACILITY_NAME", "OPERATOR_NAME", "FACILITY_ADDRESS", 
                "FACILITY_CITY", "FACILITY_STATE", "FACILITY_ZIP"]

    lookup_df = (
        dfSheet2
        .drop_duplicates(subset=["APP_ID"], keep="first")  # Gi·ªëng VLOOKUP l·∫•y b·∫£n ghi ƒë·∫ßu ti√™n
        .set_index("APP_ID")[lookup_cols]
    )

    # Th√™m 6 c·ªôt v√†o tr∆∞·ªõc c·ªôt "Reporting Year" v√† map d·ªØ li·ªáu
        # X√°c ƒë·ªãnh v·ªã tr√≠ c·ªôt Reporting Year
    pos = dfSheet1.columns.get_loc("REPORTING_YEAR")
        # Map t·ª´ng c·ªôt lookup v√†o dfSheet1
    for i, col in enumerate(lookup_cols, start=1):
        dfSheet1.insert(pos + i - 1, col, dfSheet1["APP_ID"].map(lookup_df[col]))
        # D√≤ng tren n√†y t∆∞∆°ng ƒë∆∞∆°ng vi·ªác vi·∫øt c√¥ng th·ª©c VLOOKUP() v√† k√©o sang 6 c·ªôt trong Excel.

    # L∆∞u l·∫°i Ghi cap nhat Sheet1
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet1.to_excel(writer, sheet_name="Sheet1", index=False)
        dfSheet2.to_excel(writer, sheet_name="Sheet2", index=False)
    F_excel_data_ao.seek(0)
    return F_excel_data_ao  
    
def Xli_P2_9(F_excel_data_ao):
    dfSheet1 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet1")  
    dfSheet2 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet2")
    #trong Sheet2 X√≥a c·ªôt C ‚Üí H, gexcePP_ID ngay ben trai PRIMARY_SIC
    # X√≥a theo v·ªã tr√≠ (C-H = c·ªôt 2 ‚Üí 7 v√¨ Python ƒë·∫øm t·ª´ 0)
    dfSheet2 = dfSheet2.drop(dfSheet2.columns[2:8], axis=1)
    # ƒê·∫£m b·∫£o c·ªôt sau khi x√≥a: WDID, APP_ID, PRIMARY_SIC, SECONDARY_SIC, TERTIARY_SIC

    # Trong Sheet1 ‚Äì Th√™m 3 c·ªôt m·ªõi ngay sau c·ªôt cu·ªëi c√πng
        # T·∫°o b·∫£ng tra c·ª©u t·ª´ Sheet2
    lookup_cols = ["PRIMARY_SIC", "SECONDARY_SIC", "TERTIARY_SIC"]

    lookup_df = (
        dfSheet2
        .drop_duplicates(subset=["APP_ID"], keep="first")  # gi·ªëng VLOOKUP l·∫•y b·∫£n ghi ƒë·∫ßu ti√™n
        .set_index("APP_ID")[lookup_cols]
    )
        # Th√™m 3 c·ªôt v√†o Sheet1 b·∫±ng map (t∆∞∆°ng ƒë∆∞∆°ng vi·∫øt c√¥ng th·ª©c & k√©o sang)
    for col in lookup_cols:
        dfSheet1[col] = dfSheet1["APP_ID"].map(lookup_df[col])

    # X√≥a gi√° tr·ªã 0 trong TERTIARY_SIC v√† SECONDARY_SIC
    #Trong Excel, b∆∞·ªõc l·ªçc ‚Äú0‚Äù r·ªìi Clear Contents th·ª±c ch·∫•t l√† x√≥a t·∫•t c·∫£ gi√° tr·ªã b·∫±ng 0 trong c·ªôt.
        # X√≥a gi√° tr·ªã 0 ·ªü TERTIARY_SIC
    dfSheet1.loc[dfSheet1["TERTIARY_SIC"] == 0, "TERTIARY_SIC"] = None
        # X√≥a gi√° tr·ªã 0 ·ªü SECONDARY_SIC
    dfSheet1.loc[dfSheet1["SECONDARY_SIC"] == 0, "SECONDARY_SIC"] = None

    if st.checkbox("View Sheet1_9", key='BCB9_S1'):
        st.write('(rows, cols) = ', len(dfSheet1), len(dfSheet1.columns))
        st.write(dfSheet1)
    if st.checkbox("View Sheet2_9", key='BCB9_S2'):
        st.write('(rows, cols) = ', len(dfSheet2), len(dfSheet2.columns))
        st.write(dfSheet2)

    # L∆∞u l·∫°i Ghi cap nhat vao excel
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        dfSheet1.to_excel(writer, sheet_name="Sheet1", index=False)
        dfSheet2.to_excel(writer, sheet_name="Sheet2", index=False)
    F_excel_data_ao.seek(0)

    return F_excel_data_ao  

def Xli_P2_10(F_excel_data_ao):
    dfData = pd.read_excel(F_excel_data_ao, sheet_name="Data")  
    dfNew = pd.read_excel(F_excel_data_ao, sheet_name="Sheet1")
    # ƒêi·ªÅn "Old" v√†o c·ªôt OLD/NEW cho d·ªØ li·ªáu c≈© trong sheet Data
        # Gi·∫£ s·ª≠ c·ªôt n√†y t√™n l√† "OLD/NEW"
    dfData["OLD/NEW"] = "Old"

    # G·∫Øn th√™m d·ªØ li·ªáu m·ªõi t·ª´ Sheet1 v√†o Data
        # B·ªè h√†ng header trong Sheet1 (ƒë√£ lo·∫°i khi ƒë·ªçc file)
    df_combined = pd.concat([dfData, dfNew], ignore_index=True)

    # Th√™m c·ªôt OLD/NEW = "New" cho d·ªØ li·ªáu m·ªõi
    # X√°c ƒë·ªãnh s·ªë h√†ng m·ªõi v·ª´a th√™m
    num_old = len(dfData)
    df_combined.loc[num_old:, "OLD/NEW"] = "New"

    # L∆∞u l·∫°i Ghi cap nhat vao excel
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        df_combined.to_excel(writer, sheet_name="Data", index=False)
    F_excel_data_ao.seek(0)

    # X√≥a Sheet1 v√† Sheet2 khi xu·∫•t l·∫°i (ch·ªâ gi·ªØ sheet "Data")
    #F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    #with pd.ExcelWriter(F_excel_data_ao) as writer:
    #    df_combined.to_excel(writer, sheet_name="Data", index=False)
    #F_excel_data_ao.seek(0)

    return F_excel_data_ao  

#---CAC HAM XLI PHAN III --------------------------------------
def Xli_P3_1234567(F_excel_data_ao):
    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file BytesIO() t√™n l√† F_excel_data_ao ƒë√£ c·∫≠p nh·∫≠t ·ªü b∆∞·ªõc cu·ªëi b√™n tr√™n
    dfData = pd.read_excel(F_excel_data_ao, sheet_name="Data")  

    # Sort multi-level 
    dfData = dfData.sort_values(
        by=["OLD/NEW", "PARAMETER", "RESULT"],
        ascending=[True, True, False]
    )

    # Filter ch·ªâ "New" 
    df_new = dfData[dfData["OLD/NEW"] == "New"].copy()
    # Danh s√°ch facility quan t√¢m ƒë·∫∑c bi·ªát 
        # tao menu de chon cac gia tri cua cot FACILITY_NAME de lam viec 
    lpara = dfData["FACILITY_NAME"].dropna().unique().tolist()
    lgiulai2 = []
    popover = st.popover("Select FACILITY_NAME:")
    for pt in lpara:
        checked = popover.checkbox(pt, True)
        if checked:
            lgiulai2.append(pt)
    # tai day list lgiulai da luu cac para chon

    # xem thu cac para da chon
    for pt in lgiulai2: 
        st.write(':red['+pt+']') 
    # Gi·∫£ s·ª≠ b·∫°n nh·∫≠p tay ho·∫∑c l·∫•y t·ª´ file kh√°c
    special_facilities = lgiulai2 

    # ====== NAL, TNAL, NEL threshold ======
    NAL_annual = {
        "Aluminum": 0.75,
        "Ammonia": 2.14,
        "Arsenic": 0.15,
        "BOD": 30,
        "Cadmium": 0.0053,
        "COD": 120,
        "Copper": 0.0332,
        "Cyanide": 0.022,
        "Iron": 1.0,
        "Lead": 0.262,
        "Magnesium": 0.064,
        "Mercury": 0.0014,
        "Nickel": 1.02,
        "N+N": 0.68,
        "O&G": 15,
        "Phosphorus": 2.0,
        "Selenium": 0.005,
        "Silver": 0.0183,
        "TSS": 100,
        "Zinc": 0.26
    }

    NAL_instant = {
        "O&G": 25,
        "TSS": 400,
        # pH l√† tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát, s·∫Ω x·ª≠ l√Ω ri√™ng
    }

    TNAL_NEL_threshold = {
        "Ammonia": 4.7,
        "Cadmium": 0.0031,
        "Copper": 0.06749,
        "E. coli": 400,
        "Enterococci MPN": 104,
        "Fecal Coliform": 400,
        "Lead": 0.094,
        "Nitrate": 1.0,
        "Nitrite": 1.0,
        "N+N": 1.0,
        "Total Coliform": 10000,
        "Zinc": 0.159
    }

    # ====== X√°c ƒë·ªãnh exceedance ======
    def is_exceed(row):
        param = row["PARAMETER"]
        result = row["RESULT"]

        # pH special case
        if param == "pH":
            return result < 6.0 or result > 9.0

        # Check NAL annual
        if param in NAL_annual and result > NAL_annual[param]:
            return True

        # Check NAL instant
        if param in NAL_instant and result > NAL_instant[param]:
            return True

        # Check TNAL/NEL
        if param in TNAL_NEL_threshold and result > TNAL_NEL_threshold[param]:
            return True

        return False

    df_new["Exceedance"] = df_new.apply(is_exceed, axis=1)

    # G·∫Øn c·ªù cho facilities c·∫ßn xem x√©t 
    df_new["Special_Facility"] = df_new["FACILITY_NAME"].isin(special_facilities)
    #st.write(df_new)

    # Sort l·∫°i ƒë·ªÉ xem 1 facility 
    df_facility_sorted = df_new.sort_values(
        by=["WDID", "REPORTING_YEAR", "PARAMETER", "RESULT"],
        ascending=[True, True, True, False]
    )

    styled_df = df_facility_sorted.style.apply(
        lambda row: ['background-color: yellow' if row['Exceedance'] else '' for _ in row],axis=1
        )

    if st.checkbox("View Sheet3_1", key='BCC1'):
        st.write('(rows, cols) = ', len(df_facility_sorted), len(df_facility_sorted.columns))
        st.write(df_facility_sorted)
    

    # L∆∞u l·∫°i Ghi cap nhat vao excel
    F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        styled_df.to_excel(writer, sheet_name="Data_new", index=False)
    F_excel_data_ao.seek(0)

    # T·∫°o n√∫t t·∫£i xu·ªëng
    st.download_button(
        label="üì• T·∫£i file Excel (Data_tracker_phan_III.xlsx)",
        data=F_excel_data_ao.getvalue(),
        file_name="Data_tracker_phan_III.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    # chu y rang bay gio F_excel_data_ao co them sheet Data_new
    return F_excel_data_ao

def Xli_P3_8 (F_excel_data_ao):
    # ƒê·ªçc Sheet3
    dfSheet3 = pd.read_excel(F_excel_data_ao, sheet_name="Sheet3")

    # 1Ô∏è‚É£ ƒê·ªïi v·ªã tr√≠ c·ªôt: ƒë∆∞a 'WDID' (c·ªôt B) l√™n tr∆∞·ªõc 'App ID' (c·ªôt A)
    cols = dfSheet3.columns.tolist()
    # Gi·∫£ s·ª≠ 'App ID' l√† cols[0] v√† 'WDID' l√† cols[1]
    cols_reordered = [cols[1], cols[0]] + cols[2:]
    dfSheet3 = dfSheet3[cols_reordered]

    # 2Ô∏è‚É£ X√≥a c√°c c·ªôt L ‚Üí AF (Question 4 Answer ‚Üí Question TMDL Answer)
    dfSheet3 = dfSheet3.drop(columns=dfSheet3.loc[:, "QUESTION_4_ANSWER":"QUESTION_TMDL_ANSWER"].columns)

    # 3Ô∏è‚É£ X√≥a c√°c c·ªôt E ‚Üí I (Region ‚Üí Question 2 Explanation)
    dfSheet3 = dfSheet3.drop(columns=dfSheet3.loc[:, "REGION":"QUESTION_2_EXPLANATION"].columns)

    # 4Ô∏è‚É£ ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt ƒë√∫ng nh∆∞ mong mu·ªën
    desired_order = [
        "WDID",
        "APP_ID",
        "REPORT_ID",
        "REPORT_YEAR",
        "QUESTION_3_ANSWER",
        "QUESTION_3_EXPLANATION"
    ]
    dfSheet3 = dfSheet3[desired_order]

    # ==== 6. X√≥a c√°c h√†ng c√≥ Question 3 Answer == "N" ho·∫∑c r·ªóng ====
    dfSheet3 = dfSheet3[~dfSheet3["QUESTION_3_ANSWER"].isin(["N", None, ""])]

    # ==== 7. Ch√®n c·ªôt tr·ªëng tr∆∞·ªõc c·ªôt "App ID" ====
    dfSheet3.insert(1, "App_ID_from_Data", None)  # c·ªôt m·ªõi B

    # ==== 8. Th·ª±c hi·ªán tra c·ª©u (VLOOKUP) t·ª´ sheet "Data" ====
    # Gi·∫£ s·ª≠ sheet "Data" c√≥ c·ªôt O v√† P
    #data_df = pd.read_excel("input.xlsx", sheet_name="Data", usecols="O:P")
    dfData = pd.read_excel(F_excel_data_ao, sheet_name="Data", usecols="O:P")

    # ƒë·∫∑t l·∫°i t√™n c·ªôt c·ªßa dfData th√†nh ƒë√∫ng 2 t√™n m·ªõi: 
    dfData.columns = ["lookup_key", "lookup_value"]

    # T·∫°o c·ªôt m·ªõi d·ª±a v√†o J2 = 'REPORT_YEAR' (ho·∫∑c thay 'J' b·∫±ng c·ªôt th·ª±c t·∫ø)
    dfSheet3["App_ID_from_Data"] = dfSheet3["REPORT_YEAR"].map(
        dict(zip(dfData["lookup_key"], dfData["lookup_value"]))
    )

    if st.checkbox("Edit Sheet3_2", key='BCC2'):
        st.write('(rows, cols) = ', len(dfSheet3), len(dfSheet3.columns))
        edited_dfSheet3 = st.data_editor(dfSheet3)

        # L∆∞u l·∫°i Ghi cap nhat vao excel
        F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
        with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
            edited_dfSheet3.to_excel(writer, sheet_name="Sheet3_new", index=False)
        F_excel_data_ao.seek(0)
    else:
        F_excel_data_ao.seek(0)  # quan tr·ªçng: ƒë·ªÉ writer ƒë·ªçc ƒë∆∞·ª£c file hi·ªán t·∫°i
        with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
            dfSheet3.to_excel(writer, sheet_name="Sheet3_new", index=False)
        F_excel_data_ao.seek(0)


    return F_excel_data_ao


#-------------------
def ThucThiPhan_1():
    # cac vung de chon
    regions = st.selectbox("Select a Region:", 
                ("Region 1 - North Coast",
                "Region 2 - San Francisco Bay",
                "Region 3 - Central Coast",
                "Region 4 - Los Angeles",
                "Region 5F - Fresno",
                "Region 5R - Redding",
                "Region 5S - Sacramento",
                "Region 6A - South Lake Tahoe",
                "Region 6B - Victorville",
                "Region 7 - Colorado River Basin",
                "Region 8 - Santa Ana",
                "Region 9 - San Diego"),
                index=None,
                placeholder="No selected Region",
                )
    #neu mot vung duoc chon thi lam
    LOI='OK'
    if regions:
        placeholder_1 = st.empty()
        placeholder_1.write('Wait for downloading 2 files of ' + regions)
        #thuc thi ham download_data_smarts(regions) va tra ve list cac file da tai 
        try :
            lfile_datai = download_data_smarts(regions)
            placeholder_1.write('Downloaded files:')
            st.write(lfile_datai)
        except:
            LOI='LOI'
            placeholder_1.write('Tai file kh√¥ng ƒë·∫°t!')
    if LOI == 'LOI':
        st.write('N·∫øu kh√¥ng ƒë·∫°t, '+ ':red[ m·ªü tr·ª±c ti·∫øp trang sau l√†m theo c√°c b∆∞·ªõc ƒë·ªÉ t·∫£i:]')
        st.markdown("1-[Open Page SMARTS](https://smarts.waterboards.ca.gov/smarts/SwPublicUserMenu.xhtml)", unsafe_allow_html=True)
        st.write('2-Click on ‚ÄúDownload NOI Data By Regional Board‚Äù')
        st.write('3-Select your region from the dropdown menu')
        st.write('4-Click on both ‚ÄúIndustrial Application Specific Data‚Äù and ‚ÄúIndustrial Ad Hoc Reports - Parameter Data‚Äù')
        st.write('5-Data will be downloaded to two separate .txt files, each titled ‚Äúfile‚Äù')
        st.write('6-N√™n ƒë·ªïi t√™n 2 file th√†nh Industrial_Application_Specific_Data v√† Industrial_Ad_Hoc_Reports_-_Parameter_Data r·ªìi ch√©p v√†o th∆∞ m·ª•c ri√™ng c·ªßa b·∫°n ƒë·ªÉ d·ªÖ l√†m vi·ªác ·ªü c√°c b∆∞·ªõc sau.')

def update_checkbox_sidebar(tep_mo):
    with open(tep_mo, "r", encoding="utf-8") as f:
        data = json.load(f)   
    # Gh√©p key v√† value th√†nh chu·ªói "key - value"
    if '1' in tep_mo:
        options1 = [f"{k} - {v}" for k, v in data.items()]
        for op in options1:
            if '#' not in op: 
                st.write(op)
    elif '2' in tep_mo:
        options2 = [f"{k} - {v}" for k, v in data.items()]
        for op in options2:
            if '#' not in op: 
                st.write(op)
    elif '3' in tep_mo:
        options3 = [f"{k} - {v}" for k, v in data.items()]
        for op in options3:
            if '#' not in op: 
                st.write(op)
    else:
        options4 = [f"{k} - {v}" for k, v in data.items()]
        for op in options4:
            if '#' not in op: 
                st.write(op)

def Xem_do_thi_1():
    # Example data
    data = {
        "Month": ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
        "Sales": [150, 200, 250, 220, 300, 400],
        "Expenses": [100, 120, 180, 160, 210, 280]
    }
    # Create DataFrame
    df = pd.DataFrame(data)
    # Set index for better x-axis labels
    df.set_index("Month", inplace=True)
    st.title("üìà Company Sales and Expenses Over Months")
    # Line chart
    st.line_chart(df)


def Xem_do_thi_2():
    # Example data
    data = {
        "Product": ["A", "B", "C", "D"],
        "Sales": [300, 450, 150, 500],
        "Profit": [80, 120, 300, 20]
    }
    # Create DataFrame
    df = pd.DataFrame(data)
    # Set 'Product' as index (so it appears on x-axis)
    df.set_index("Product", inplace=True)
    st.title("üìä Sales and Profit by Product")
    # Streamlit bar chart
    st.bar_chart(df)

def Xem_do_thi_3():
    data = {
        "Product": ["A", "B", "C", "D"],
        "Sales": [300, 450, 150, 500],
        "Profit": [80, 120, 50, 200]
    }

    # Create DataFrame
    df = pd.DataFrame(data)
    df.set_index("Product", inplace=True)

    st.title("üìä Horizontal Bar Plot Example")

    # Create matplotlib horizontal bar plot
    fig, ax = plt.subplots()
    df.plot(kind="barh", ax=ax)

    # Customize
    ax.set_title("Sales and Profit by Product")
    ax.set_xlabel("Amount ($)")
    ax.set_ylabel("Product")

    # Show in Streamlit
    st.pyplot(fig)


def Xem_do_thi_4():
    # Gi·∫£ l·∫≠p d·ªØ li·ªáu: thu nh·∫≠p c·ªßa 1000 nh√¢n vi√™n (tri·ªáu VND)
    np.random.seed(42)
    incomes = np.random.normal(loc=15, scale=5, size=1000)  # trung b√¨nh 15, l·ªách chu·∫©n 5
    incomes = np.clip(incomes, 5, 50)  # Gi·ªõi h·∫°n t·ª´ 5 ƒë·∫øn 50 tri·ªáu

    df = pd.DataFrame({"Income": incomes})

    # V·∫Ω histogram
    fig, ax = plt.subplots()
    df["Income"].hist(bins=20, ax=ax, edgecolor="black")
    ax.set_title("Bi·ªÉu ƒë·ªì Histogram v·ªÅ Ph√¢n b·ªë thu nh·∫≠p nh√¢n vi√™n")
    ax.set_xlabel("Thu nh·∫≠p (tri·ªáu VND)")
    ax.set_ylabel("S·ªë l∆∞·ª£ng nh√¢n vi√™n")
    st.pyplot(fig)

def Xem_do_thi_5():
    st.title("üì¶ Ph√¢n b·ªë ƒëi·ªÉm thi c·ªßa h·ªçc sinh 3 l√≥p A,B,C b·∫±ng Box Plot")
    # T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p
    np.random.seed(42)
    data = {
        "Class": (["A"] * 30) + (["B"] * 30) + (["C"] * 30),
        "Score": list(np.random.normal(75, 10, 30)) +   # L·ªõp A: trung b√¨nh 75, l·ªách chu·∫©n 10
                list(np.random.normal(65, 15, 30)) +   # L·ªõp B: trung b√¨nh 65, l·ªách chu·∫©n 15
                list(np.random.normal(80, 50, 30))      # L·ªõp C: trung b√¨nh 80, l·ªách chu·∫©n 5
    }

    df = pd.DataFrame(data)
    # V·∫Ω box plot
    fig, ax = plt.subplots()
    df.boxplot(column="Score", by="Class", ax=ax)
    # T√πy ch·ªânh
    ax.set_title("So s√°nh ph√¢n b·ªë ƒëi·ªÉm thi gi·ªØa c√°c l·ªõp")
    ax.set_xlabel("L·ªõp h·ªçc")
    ax.set_ylabel("ƒêi·ªÉm s·ªë")
    plt.suptitle("")  # X√≥a ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh c·ªßa pandas

    # Hi·ªÉn th·ªã trong Streamlit
    st.pyplot(fig)
    
    st.markdown("""
    ‚úÖ ·ªû v√≠ d·ª• n√†y:
    L·ªõp A c√≥ ƒëi·ªÉm kh√° ·ªïn ƒë·ªãnh quanh 75.
    L·ªõp B ph√¢n b·ªë r·ªông, nhi·ªÅu h·ªçc sinh ch√™nh l·ªách.
    L·ªõp C t·∫≠p trung quanh 80, √≠t bi·∫øn ƒë·ªông.
    üëâ ƒê√¢y ch√≠nh l√† t√¨nh hu·ªëng ƒëi·ªÉn h√¨nh m√† ch·ªâ box plot m·ªõi di·ªÖn t·∫£ ƒë∆∞·ª£c, 
    c√≤n bar chart ch·ªâ cho b·∫°n th·∫•y trung b√¨nh, m·∫•t h·∫øt th√¥ng tin v·ªÅ ph√¢n b·ªë.
    """)
    st.markdown("""
    ### üìå V√¨ sao d√πng Box Plot?
    - Hi·ªÉn th·ªã **median (trung v·ªã)**: m·ª©c ƒëi·ªÉn h√¨nh c·ªßa l·ªõp.
    - Cho th·∫•y **kho·∫£ng t·ª© ph√¢n v·ªã (IQR)**: ƒë·ªô ph√¢n t√°n.
    - Th·∫•y ngay **outliers (ƒëi·ªÉm b·∫•t th∆∞·ªùng)**, v√≠ d·ª• h·ªçc sinh ƒëi·ªÉm qu√° th·∫•p ho·∫∑c qu√° cao.
    - C√°c bi·ªÉu ƒë·ªì kh√°c nh∆∞ **bar chart, line chart** kh√¥ng th·ªÉ hi·ªán ƒë∆∞·ª£c nh·ªØng th√¥ng tin n√†y. 
    [Read more here](http://sociologyhue.edu.vn/blog/post/22288)
    """)

def Xem_do_thi_6():
    st.title("üåà Area Plot Example")
    # Example dataset
    data = {
        "Month": ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
        "Sales": [150, 200, 250, 220, 300, 400],
        "Expenses": [100, 120, 180, 160, 210, 280]
    }
    # Create DataFrame
    df = pd.DataFrame(data)
    df.set_index("Month", inplace=True)

    # Create matplotlib figure
    fig, ax = plt.subplots()
    df.plot(kind="area", alpha=0.5, ax=ax)  # alpha ƒë·ªÉ trong su·ªët nh√¨n r√µ ch·ªìng l√™n nhau

    # Customize
    ax.set_title("Sales vs Expenses (Area Plot)")
    ax.set_xlabel("Month")
    ax.set_ylabel("Amount ($)")
    ax.grid(True)

    # Show in Streamlit
    st.pyplot(fig)

def Xem_do_thi_7():
    st.title("ü•ß Pie Chart Example")

    # Example dataset
    data = {
        "Product": ["A", "B", "C", "D"],
        "Sales": [300, 450, 150, 500]
    }

    # Create DataFrame
    df = pd.DataFrame(data)

    # Create matplotlib figure
    fig, ax = plt.subplots()
    ax.pie(df["Sales"], labels=df["Product"], autopct="%1.1f%%", startangle=90)
    ax.set_title("Sales Distribution by Product")

    # Show in Streamlit
    st.pyplot(fig)

def Xem_do_thi_8():
    st.title("üîπ Scatter Plot Example")
    # Example dataset
    np.random.seed(42)
    data = {
        "Advertising": np.random.randint(50, 200, 20),  # Chi ph√≠ qu·∫£ng c√°o
        "Sales": np.random.randint(100, 500, 20)        # Doanh s·ªë
    }

    # Create DataFrame
    df = pd.DataFrame(data)

    # Create matplotlib figure
    fig, ax = plt.subplots()
    ax.scatter(df["Advertising"], df["Sales"], color="blue", s=100, alpha=0.7, edgecolors="k")

    # Customize
    ax.set_title("Sales vs Advertising")
    ax.set_xlabel("Advertising ($)")
    ax.set_ylabel("Sales ($)")
    ax.grid(True)

    # Show in Streamlit
    st.pyplot(fig)

def Xem_do_thi_9():
    st.title("üî∑ Hexbin Plot Example")
    # T·∫°o d·ªØ li·ªáu v√≠ d·ª•
    np.random.seed(42)
    x = np.random.randn(1000) * 50 + 200   # D·ªØ li·ªáu Advertising
    y = np.random.randn(1000) * 80 + 300   # D·ªØ li·ªáu Sales

    df = pd.DataFrame({"Advertising": x, "Sales": y})

    # T·∫°o figure
    fig, ax = plt.subplots(figsize=(7,5))

    # V·∫Ω hexbin plot
    hb = ax.hexbin(df["Advertising"], df["Sales"], gridsize=30, cmap="Blues", mincnt=1)

    # Th√™m colorbar
    cb = fig.colorbar(hb, ax=ax)
    cb.set_label("Number of points")

    # T√πy ch·ªânh
    ax.set_title("Sales vs Advertising (Hexbin Plot)")
    ax.set_xlabel("Advertising ($)")
    ax.set_ylabel("Sales ($)")
    ax.grid(True)

    # Hi·ªÉn th·ªã trong Streamlit
    st.pyplot(fig)
                

#========================= MAIN =====================================================================
# global
DACO_EXCEL_4SHEET=False
PHANIIFINISHED=False
PHANIIIFINISHED=False
tepexcel_ao=None
# TIEU DE APP
#st.header('üîé Consider CA Rai')
st.title('üîé Review Reported Wastewater Data')
#-----------------------------------------

# Phan sider ben trai ---------------------------------------------------------------------------
with st.sidebar:
    st.header('üè∑Ô∏è :red[LOOK UP DOCUMENT]')
    # Xem tai lieu SMARTS
    st.write("---")
    checkbox_sidebar_0 = st.checkbox(":blue[üìå SMARTS documents used as a basis for writing this program]", key='PL0', value=False)
    if checkbox_sidebar_0:
        # ƒê·ªçc n·ªôi dung file Markdown
        with open("hd-lam-app-cho-thong.md", "r", encoding="utf-8") as f:
            md_content = f.read()
        st.markdown(md_content, unsafe_allow_html=True)
    
    st.write("---")
    checkbox_sidebar_1 = st.checkbox(":green[üìå Headers in Sheet1 (Industrial_Ad_Hoc_Reports)]", key='PL1', value=False)
    if checkbox_sidebar_1:
        tep_1 = "Headers/dict_sheet1.json"
        update_checkbox_sidebar(tep_1)

    st.write("---")
    # Xem Header Sheet2 
    checkbox_sidebar_2 = st.checkbox(":green[üìå Headers in Sheet2 (Industrial_Application_Specific_Data)]", key='PL2', value=False)
    if checkbox_sidebar_2:
        tep_2 = "Headers/dict_sheet2.json"
        update_checkbox_sidebar(tep_2)


    st.write("---")
    # Xem Header Sheet3 
    checkbox_sidebar_3 = st.checkbox(":green[üìå Headers in Sheet3 (Industrial_Annual_Reports)]", key='PL3', value=False)
    if checkbox_sidebar_3:
        tep_3 = "Headers/dict_sheet3.json"
        update_checkbox_sidebar(tep_3)

    st.write("---")
    # Xem Header Data
    checkbox_sidebar_4 = st.checkbox(":green[üìå Headers in Data]", key='PL4', value=False)
    if checkbox_sidebar_4:
        tep_4 = "Headers/dict_data.json"
        update_checkbox_sidebar(tep_4)


    st.write("---")
    # Minh hoa vai loai do thi
    checkbox_sidebar_5 = st.checkbox(":red[üìåIllustrate data examples]", key='PL5', value=False)
    if checkbox_sidebar_5:
        loai_do_thi = st.radio(
            "Chon loai do thi",
            ["Line plot",
            "Bar plot", 
            "Barh plot", 
            "Histogram", 
            "Box plot", 
            "Area plot", 
            "Pie chart",
            "Scatter plot",
            "Hexbin plot"
            ],
            index=None,
        )
        if loai_do_thi == "Line plot":
            Xem_do_thi_1()
        elif loai_do_thi == "Bar plot":
            Xem_do_thi_2()
        elif loai_do_thi == "Barh plot":
            Xem_do_thi_3()
        elif loai_do_thi == "Histogram":
            Xem_do_thi_4()
        elif loai_do_thi == "Box plot":
            Xem_do_thi_5()
        elif loai_do_thi == "Area plot":
            Xem_do_thi_6()
        elif loai_do_thi == "Pie chart":
            Xem_do_thi_7()
        elif loai_do_thi == "Scatter plot":
            Xem_do_thi_8()
        elif loai_do_thi == "Hexbin plot":
            Xem_do_thi_9()



# I. TAI FILES TXT DU LIEU VE TU -----------------------------------------------------------------
st.header('‚úÖ I. Download the data', divider=True)
ThucThiPhan_1()

# II Them data moi vao trinh theo doi -------------------------------------------------------------
st.header('‚úÖ II. Add the new data to your tracker', divider=True)

laydatafrom = st.radio(
    "WHERE GET DATA ", 
    [":blue[From Local]",":green[From Server]", ":red[Empty]"],
    index=2,horizontal=True , label_visibility="visible") 

if laydatafrom==":red[Empty]":
    DACO_EXCEL_4SHEET=False
    pass  

elif laydatafrom==":blue[From Local]":
    # Add the new data to your tracker 
    # - Upload 4 files
    uploaded_files = st.file_uploader(
        'Upload 1 l·∫ßn 4 files: "...Industrial_Ad_Hoc...", "...Industrial_Application...", "...Industrial_Annual_Reports.txt...", "...Data_Tracker..." ' + ' :red[(n√™n ƒë·∫∑t 4 files n√†y li·ªÅn nhau trong 1 th∆∞ m·ª•c)]',
        type=['txt', 'xlsx'],  
        accept_multiple_files=True
    )
    st.write(len(uploaded_files),'files')
    for file in uploaded_files:
        st.write(file.name)

    if uploaded_files and len(uploaded_files) == 4:
        # Ph√¢n lo·∫°i file theo ƒëu√¥i v√† t√™n
        uploaded_f1 = next((f for f in uploaded_files if "industrial_ad_hoc" in f.name.lower()), None)
        uploaded_f2 = next((f for f in uploaded_files if "industrial_application" in f.name.lower()), None)
        uploaded_f3 = next((f for f in uploaded_files if "industrial_annual_reports" in f.name.lower()), None)
        uploaded_f4 = next((f for f in uploaded_files if f.name.lower().endswith(".xlsx")), None)

        if uploaded_f1 and uploaded_f2 and uploaded_f3 and uploaded_f4:
            try:
                #df = pd.read_csv("file.csv", on_bad_lines="skip")
                df1 = pd.read_csv(uploaded_f1, sep='\t', encoding='cp1252', on_bad_lines="skip")
                df2 = pd.read_csv(uploaded_f2, sep='\t', encoding='cp1252', on_bad_lines="skip")
                df3 = pd.read_csv(uploaded_f3, sep='\t', encoding='cp1252', on_bad_lines="skip")
                #dfData = pd.read_excel(uploaded_f4, sheet_name="Data")  # Ch·ªâ ƒë·ªçc sheet "Data"
            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc file: {e}")
                st.stop()
            #---
            # ƒê·ªçc file Excel ƒë√£ upload
            excel_data = uploaded_f4.read()

            # Ghi DataFrame TXT v√†o file Excel ƒë√£ upload
            F_excel_data_ao = BytesIO()
            with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl") as writer:
                # Ghi l·∫°i c√°c sheet c≈© c·ªßa file Excel g·ªëc
                original_excel = pd.ExcelFile(BytesIO(excel_data))
                for sheet_name in original_excel.sheet_names:
                    df_old = pd.read_excel(original_excel, sheet_name=sheet_name)
                    df_old.to_excel(writer, sheet_name=sheet_name, index=False)
                # Th√™m / Ghi ƒë√® sheet "Sheet1" b·∫±ng d·ªØ li·ªáu t·ª´ file TXT
                df1.to_excel(writer, sheet_name="Sheet1", index=False)
                df2.to_excel(writer, sheet_name="Sheet2", index=False)
                df3.to_excel(writer, sheet_name="Sheet3", index=False)

            # 3. T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
            DACO_EXCEL_4SHEET=True
else:
    # ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c TAM (n·∫±m ngang v·ªõi streamlit_app.py)
    BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Datatest")

    # T√™n file mong mu·ªën
    file_names = ["Region_1_-_North_Coast_-_Industrial_Ad_Hoc_Reports_-_Parameter_Data.txt",
            "Region_1_-_North_Coast_-_Industrial_Application_Specific_Data.txt", 
            "Region_1_-_North_Coast_-_Industrial_Annual_Reports.txt",
            "Data_Tracker_X.xlsx"
            ]
    # Danh s√°ch ƒë∆∞·ªùng d·∫´n file tr√™n server
    server_files = [os.path.join(BASE_DIR, name) for name in file_names]
    #server_files = file_names
    # Ki·ªÉm tra xem t·∫•t c·∫£ file c√≥ s·∫µn tr√™n server kh√¥ng
    if all(os.path.exists(path) for path in server_files):
        st.info("üìÇ ƒêang d√πng file trong th∆∞ m·ª•c Datatest.")
            #with open(server_files[0], "r", encoding="utf-8") as f1:
            #    txt_content_f1 = f1.read()
            #with open(server_files[1], "r", encoding="utf-8") as f2:
            #    txt_content_f2 = f2.read()
        df1 = pd.read_csv(server_files[0], sep='\t', encoding='cp1252')
        df2 = pd.read_csv(server_files[1], sep='\t', encoding='cp1252')
        df3 = pd.read_csv(server_files[2], sep='\t', encoding='cp1252')
        #dfData = pd.read_excel(server_files[3])
        excel_data = pd.read_excel(server_files[3])

    else:
        st.warning("üì§ File ch∆∞a c√≥ trong Datatest, vui l√≤ng upload.")
        exit()
    #excel_data = pd.read_excel(server_files[3])

    # L∆∞u l·∫°i Ghi cap nhat vao excel
    F_excel_data_ao = BytesIO()
    with pd.ExcelWriter(F_excel_data_ao, engine="openpyxl") as writer:
        df1.to_excel(writer, sheet_name="Sheet1", index=False)
        df2.to_excel(writer, sheet_name="Sheet2", index=False)
        df3.to_excel(writer, sheet_name="Sheet3", index=False)
        excel_data.to_excel(writer, sheet_name="Data", index=False)

    # T·∫°o n√∫t t·∫£i xu·ªëng
    st.download_button(
        label="üì• T·∫£i file Excel (Data_tracker_goc.xlsx)",
        data=F_excel_data_ao.getvalue(),
        file_name="Data_tracker_goc.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    DACO_EXCEL_4SHEET=True

if DACO_EXCEL_4SHEET==True :
    
    #--------------------------------------
    #st.subheader(":red[‚û°Ô∏è Add the new data to your tracker]")

    #checkbox1 = st.checkbox("üìå:blue[1. X√≥a c√°c d√≤ng m√† STATUS ‚â† 'Active' trong c√°c d√≤ng c√≥ APP_ID tr√πng l·∫∑p in Sheet2]", key='CB1')
    checkbox1 = st.checkbox("üìå:blue[1. In your data_tracker.xlsx, create Sheet1, Sheet2, Sheet3 contain 3 file.txt]", key='CB1', value=True)
    if checkbox1:
        # tra ve kq la file ao da update cung ten F_excel_data_ao 
        F_excel_data_ao = Xli_P2_1(F_excel_data_ao) 
        if F_excel_data_ao:
            st.write(':green[Xli_P2_1 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_1.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_1.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    #checkbox2 = st.checkbox("üìå:blue[2. Delete, move, re-order columns in Sheet2]", key='CB2')
    checkbox2 = st.checkbox("üìå:blue[2. Get Sheet2 into the proper format for your tracker]", key='CB2', value=True)
    if checkbox1 and checkbox2:
        F_excel_data_ao = Xli_P2_2(F_excel_data_ao)
        if F_excel_data_ao:
            st.write(':green[Xli_P2_2 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_2.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_2.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    #checkbox3 = st.checkbox("üìå:blue[3. Delete all rows duplicated and rows showing '4 56' in WDID in Sheet1]", key='CB3')
    checkbox3 = st.checkbox("üìå:blue[3. Get Sheet1 into the proper format for your tracker]", key='CB3', value=True)
    if checkbox1 and checkbox2 and checkbox3:
        F_excel_data_ao = Xli_P2_3(F_excel_data_ao)
        if F_excel_data_ao:
            st.write(':green[Xli_P2_3 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_2.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_3.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    checkbox4 = st.checkbox("üìå:blue[4. Filter Sheet1 for only new sample data]", key='CB4', value=True)
    if checkbox1 and checkbox2 and checkbox3 and checkbox4:
        F_excel_data_ao = Xli_P2_4(F_excel_data_ao)
        if F_excel_data_ao:
            st.write(':green[Xli_P2_4 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_4.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_4.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    checkbox5 = st.checkbox("üìå:blue[5. Check if facilities in Sheet1 are active]", key='CB5', value=True)
    if checkbox1 and checkbox2 and checkbox3 and checkbox4 and checkbox5:
        F_excel_data_ao = Xli_P2_5(F_excel_data_ao)
        if F_excel_data_ao:
            st.write(':green[Xli_P2_5 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_5.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_5.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    checkbox6 = st.checkbox("üìå:blue[6. Choose the parameters to track in Sheet1]", key='CB6', value=True)
    if checkbox1 and checkbox2 and checkbox3 and checkbox4  and checkbox5 and checkbox6:
        F_excel_data_ao = Xli_P2_6(F_excel_data_ao)

        if F_excel_data_ao:
            st.write(':green[Xli_P2_6 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_6.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_6.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )


    checkbox7 = st.checkbox("üìå:blue[7. Make sure all the samples in Sheet1 are in mg/L and not ug/L]", key='CB7', value=True)
    if checkbox1 and checkbox2 and checkbox3 and checkbox4  and checkbox5  and checkbox6  and checkbox7:
        F_excel_data_ao = Xli_P2_7(F_excel_data_ao)

        if F_excel_data_ao:
            st.write(':green[Xli_P2_7 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_7.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_7.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )


    checkbox8 = st.checkbox("üìå:blue[8. Add facility information from Sheet2 into Sheet1]", key='CB8', value=True)
    if checkbox1 and checkbox2 and checkbox3 and checkbox4  and checkbox5  and checkbox6  and checkbox7 and checkbox8:
        F_excel_data_ao = Xli_P2_8(F_excel_data_ao)

        if F_excel_data_ao:
            st.write(':green[Xli_P2_8 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_8.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_8.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    checkbox9 = st.checkbox("üìå:blue[9. Add in SIC Codes from Sheet2 into Sheet1]", key='CB9', value=True)
    if checkbox1 and checkbox2 and checkbox3 and checkbox4  and checkbox5  and checkbox6  and checkbox7 and checkbox8  and checkbox9:
        F_excel_data_ao = Xli_P2_9(F_excel_data_ao)

        if F_excel_data_ao:
            st.write(':green[Xli_P2_9 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_9.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_9.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    checkbox10 = st.checkbox("üìå:blue[10. Combine new data from Sheet1 into existing Data tracker]", key='CB10', value=True)
    if checkbox1 and checkbox2 and checkbox3 and checkbox4  and checkbox5  and checkbox6  and checkbox7 and checkbox8  and checkbox9:
        F_excel_data_ao = Xli_P2_10(F_excel_data_ao)

        if F_excel_data_ao:
            st.write(':green[Xli_P2_10 finished.]')
            # T·∫°o n√∫t t·∫£i xu·ªëng
            st.download_button(
                label="üì• T·∫£i file Excel (Data_tracker_add2sheet_10.xlsx)",
                data=F_excel_data_ao.getvalue(),
                file_name="Data_tracker_add2sheet_10.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        PHANIIFINISHED=True

# III Them data moi vao trinh theo doi -------------------------------------------------------------
st.header('‚úÖ III. Analyze the new data', divider=True)
if PHANIIFINISHED:
    
    checkboxIII_1234567 = st.checkbox("üìå:blue[1. Xem c∆° s·ªü n√†o c√≥ c√°c ch·ªâ s·ªë v∆∞·ª£t ng∆∞·ª°ng ]", key='CB31', value=True)
    if checkboxIII_1234567:
        F_excel_data_ao = Xli_P3_1234567(F_excel_data_ao)
        
    if F_excel_data_ao:
        st.write(':green[Xli_P3_1234567 finished.]')
        # T·∫°o n√∫t t·∫£i xu·ªëng
        st.download_button(
            label="üì• T·∫£i file Excel (Data_tracker_add3sheet_1234567.xlsx)",
            data=F_excel_data_ao.getvalue(),
            file_name="Data_tracker_add3sheet_1234567.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    # Phan sau lay lai sheet Data de lam viec (KHONG lay Data_new)
    #-------------------------------
    # 8. Ki·ªÉm tra xem c∆° s·ªü n√†o ƒëang n√≥i d·ªëi trong b√°o c√°o h√†ng nƒÉm 
    # v·ªÅ vi·ªác l·∫•y m·∫´u t·∫•t c·∫£ c√°c QSE

    checkboxIII_8 = st.checkbox("üìå:blue[2. Check to see which facilities are lying in annual reports about sampling all QSEs]", key='CB32', value=True)
    if checkboxIII_8:
        F_excel_data_ao = Xli_P3_8(F_excel_data_ao)

    if F_excel_data_ao:
        st.write(':green[Xli_P3_8 finished.]')

        # T·∫°o n√∫t t·∫£i xu·ªëng
        st.download_button(
            label="üì• T·∫£i file Excel (Data_tracker_add3sheet_8.xlsx)",
            data=F_excel_data_ao.getvalue(),
            file_name="Data_tracker_add3sheet_8.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
        PHANIIIFINISHED=True







# IV Them data moi vao trinh theo doi -------------------------------------------------------------
st.header('‚úÖ IV. Visualize the data', divider=True)
if PHANIIIFINISHED:
    def pivot_summary(df, index_cols, value_col="Result", agg="mean"):
        """T·∫°o pivot table t·ª´ dataframe"""
        pivot = pd.pivot_table(
            df,
            index=index_cols,
            columns="Parameter",
            values=value_col,
            aggfunc=agg,
            fill_value=0
        ).reset_index()
        return pivot

    def visualize_data():
        st.subheader("üìä Water Data Summary Tool")

        # Upload Excel
        uploaded = st.file_uploader("Upload Excel file", type=["xlsx"])
        if uploaded is not None:
            df = pd.read_excel(uploaded, sheet_name="Data")
            st.success("‚úÖ File loaded")

            # L√†m s·∫°ch d·ªØ li·ªáu
            df["Result"] = df["Result"].fillna(0)

            # Ch·ªçn index cho pivot
            index_options = ["Facility", "MonitoringLocation", "ReportingYear"]
            index_cols = st.multiselect("Ch·ªçn c√°c c·ªôt l√†m Rows:", index_options, default=["ReportingYear"])

            # Ch·ªçn ph√©p t√≠nh
            agg_func = st.selectbox("Ch·ªçn ph√©p t√≠nh:", ["mean", "count", "sum"])

            if st.button("T·∫°o Pivot Table"):
                pivot = pivot_summary(df, index_cols, "Result", agg=agg_func)
                st.dataframe(pivot)

                # Xu·∫•t Excel
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                    pivot.to_excel(writer, sheet_name="Summary", index=False)
                st.download_button("üì• Download Excel", data=output.getvalue(),
                                file_name="summary.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

                # V·∫Ω bi·ªÉu ƒë·ªì
                if "ReportingYear" in pivot.columns:
                    for param in df["Parameter"].unique():
                        if param in pivot.columns:
                            fig, ax = plt.subplots()
                            pivot.groupby("ReportingYear")[param].mean().plot(kind="bar", ax=ax)
                            ax.set_title(f"{agg_func.capitalize()} of {param} by Year")
                            st.pyplot(fig)

    visualize_data()

end_time = time.time()
elapsed_time = (end_time - start_time)/60

st.write(f"‚è≥ It took : {elapsed_time:.2f} minutes")