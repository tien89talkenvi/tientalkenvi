import streamlit as st  # streamlit=1.47.1
import pandas as pd     # pandas=2.3.1
import os, time

from selenium import webdriver  # selenium=4.34.2
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC

import shutil
from openpyxl import Workbook, load_workbook    # openpyxl=3.1.5
from io import BytesIO
import xlsxwriter   # xlsxwriter=3.2.5
import tempfile

#--------------------------------------------------------------

# Cac Ham Phu --------------------------------------------------
# Ham thu viec doc file txt/cvs dung encoding nao khong gay loi
def check_read_file_txt(filetxt):
    encodings_to_try = ['utf-8', 'utf-8-sig', 'cp1252', 'cp1258', 'utf-16']

    for enc in encodings_to_try:
        try:
            df = pd.read_csv('file.txt', delimiter='\t', encoding=enc)
            print(f"‚úÖ Th√†nh c√¥ng v·ªõi encoding: {enc}")
            break
        except Exception as e:
            print(f"‚ùå {enc}: {e}")

# Ham tai file txt du lieu dang cvs cua cac mien thuoc bang Cali
@st.cache_data
def download_data_smarts(regions):
    #xoa thu muc downloads va tao lai de chi chua 2 file du lieu
    folder_path_cu = 'downloads'
    # X√≥a th∆∞ m·ª•c n·∫øu t·ªìn t·∫°i
    if os.path.exists(folder_path_cu):
        shutil.rmtree(folder_path_cu)  # X√≥a to√†n b·ªô th∆∞ m·ª•c v√† n·ªôi dung b√™n trong

    download_dir = os.path.abspath("downloads")
    os.makedirs(download_dir, exist_ok=True)

    # ‚úÖ C·∫§U H√åNH CHROME:
    options = webdriver.ChromeOptions()
    prefs = {
        "download.default_directory": download_dir,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True,
        "profile.default_content_setting_values.automatic_downloads": 1   # D√íNG QUAN TR·ªåNG DE TAT THONG BAO
    }
    options.add_experimental_option("prefs", prefs)
    options.add_argument("--headless")  # ch·∫°y ·∫©n tr√¨nh duy·ªát

    # ‚úÖ KH·ªûI T·∫†O TR√åNH DUY·ªÜT
    driver = webdriver.Chrome(options=options)

    driver.get("https://smarts.waterboards.ca.gov/smarts/SwPublicUserMenu.xhtml")
    print("‚úÖ V√†o trang ch√≠nh")

    WebDriverWait(driver, 15).until(
        EC.element_to_be_clickable((By.LINK_TEXT, "Download NOI Data By Regional Board"))
    ).click()

    WebDriverWait(driver, 10).until(lambda d: len(d.window_handles) > 1)
    driver.switch_to.window(driver.window_handles[-1])
    print("‚úÖ ƒê√£ chuy·ªÉn sang tab m·ªõi")

    links = [
        "Industrial Application Specific Data",
        "Industrial Ad Hoc Reports - Parameter Data"
    ]

    def wait_for_download_and_get_new_file(before_files, timeout=40):
        for _ in range(timeout * 2):
            time.sleep(0.5)
            after_files = set(os.listdir(download_dir))
            new_files = after_files - before_files
            txt_files = [f for f in new_files if f.endswith(".txt")]
            if txt_files:
                return txt_files[0]
        return None
    #---------------------
    region = regions
    print(f"\nüîπ Ch·ªçn Region: {region}")
    dropdown = WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.NAME, "intDataFileDowloaddataFileForm:intDataDumpSelectOne"))
    )
    Select(dropdown).select_by_visible_text(region)
    time.sleep(3)  # ƒê·ª£i dropdown load l·∫°i
    
    lfile_datai = []

    for j, name in enumerate(links):
        try:
            print(f"üì• ƒêang click t·∫£i: {name}")
            before = set(os.listdir(download_dir))

            link_elem = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.LINK_TEXT, name))
            )
            driver.execute_script("arguments[0].click();", link_elem)

            fname = wait_for_download_and_get_new_file(before)
            if fname:
                # T·∫°o t√™n file chu·∫©n theo Region + t√™n file
                src = os.path.join(download_dir, fname)
                dst_name = f"{region} - {name}.txt"
                dst_name = dst_name.replace(" ", "_")  # N·∫øu mu·ªën
                dst = os.path.join(download_dir, dst_name)
                os.rename(src, dst)
                print(f"File ƒë√£ l∆∞u: {dst}")
                lfile_datai.append(f"{dst}")
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y file m·ªõi sau khi t·∫£i")
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i {name} ·ªü Region {region}: {e}")

    driver.quit()
    print("\nüéâ Ho√†n t·∫•t t·∫£i file cho "+region)
    return lfile_datai
    # CHU Y rang neu ten file dat trung voi file da co thi that bai.
# CAC HAM CHINH-----------------------------------------------------
def ThucThiPhan_4():
    return    

def ThucThiPhan_3():
    uploaded_file_data_tracker = st.file_uploader('Upload Data_Tracker_New',type=['xlsx'])
    return    

# ---- phuc vu cho ThucThiPhan_2()----
@st.cache_data
def Combined_to_data_tracker(uploaded_tracker):
    try:
        # Read input files
        sheet1 = pd.read_excel(uploaded_tracker, sheet_name='Sheet1', header=None, dtype=str)
        sheet2 = pd.read_excel(uploaded_tracker, sheet_name='Sheet2', dtype=str)
        df_tracker = pd.read_excel(uploaded_tracker, sheet_name='Data', dtype=str)

        # Clean Sheet1
        cols_to_delete = list(range(15, 28)) + list(range(31, 38)) + [0, 4, 5, 6, 7, 11]
        # Ch·ªâ l·∫•y c√°c ch·ªâ s·ªë c·ªôt c·∫ßn x√≥a, nh∆∞ng ph·∫£i nh·ªè h∆°n num_cols
        num_cols = sheet1.shape[1]
        cols_to_delete = [col for col in cols_to_delete if col < num_cols]
        sheet1_cleaned = sheet1.drop(sheet1.columns[cols_to_delete], axis=1)

        sheet1_cleaned.columns = sheet1_cleaned.iloc[0]
        sheet1_cleaned = sheet1_cleaned[1:]

        # Reorder columns
        cols = list(sheet1_cleaned.columns)
        if 'WDID' in cols and 'APP_ID' in cols:
            cols.remove('WDID')
            cols.insert(cols.index('APP_ID'), 'WDID')
        if 'FACILITY_NAME' in cols and 'OPERATOR_NAME' in cols:
            cols.remove('FACILITY_NAME')
            cols.insert(cols.index('OPERATOR_NAME'), 'FACILITY_NAME')
        sheet1_cleaned = sheet1_cleaned[cols]


        # Clean Sheet2 and merge SIC data
        sheet2_cleaned = sheet2.drop(sheet2.columns[2:8], axis=1)
        sheet2_cleaned = sheet2_cleaned.iloc[:, :5]  # Ch·ªâ l·∫•y 5 c·ªôt ƒë·∫ßu ti√™n
        sheet2_cleaned.columns = ['A', 'APP_ID', 'PRIMARY_SIC', 'SECONDARY_SIC', 'TERTIARY_SIC']
        sheet2_cleaned = sheet2_cleaned[['APP_ID', 'PRIMARY_SIC', 'SECONDARY_SIC', 'TERTIARY_SIC']]
        merged = pd.merge(sheet1_cleaned, sheet2_cleaned, on='APP_ID', how='left')
        merged = merged.rename(columns={'PRIMARY_SIC': '1', 'SECONDARY_SIC': '2', 'TERTIARY_SIC': '3'})
        merged['2'] = merged['2'].replace('0', pd.NA)
        merged['3'] = merged['3'].replace('0', pd.NA)
        merged['OLD/NEW'] = 'new'

        # Add "Old" tag to tracker and combine
        df_tracker['OLD/NEW'] = 'old'
        df_combined = pd.concat([df_tracker, merged], ignore_index=True)

        # Export to Excel in-memory
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_combined.to_excel(writer, sheet_name='Data', index=False)
        output.seek(0)
        return output 
    except Exception as e:
        st.error(f"‚ö†Ô∏è An error occurred: {e}")


@st.cache_data
def Txt_to_data_tracker(df1, df2, df_data):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df1.to_excel(writer, sheet_name="Sheet1", index=False)
        df2.to_excel(writer, sheet_name="Sheet2", index=False)
        df_data.to_excel(writer, sheet_name="Data", index=False)
    output.seek(0)
    return output
     



# -----------------
def ThucThiPhan_2():    
    uploaded_files = st.file_uploader(
        'Upload your files',
        type=['txt', 'xlsx'],  # Optional: specify allowed file types
        accept_multiple_files=True
    )
    if uploaded_files and len(uploaded_files) == 3:
        # Ph√¢n lo·∫°i file theo ƒëu√¥i v√† t√™n
        uploaded_f1 = next((f for f in uploaded_files if "industrial_ad_hoc" in f.name.lower()), None)
        uploaded_f3 = next((f for f in uploaded_files if f.name.lower().endswith(".xlsx")), None)
        # f2 l√† file .txt c√≤n l·∫°i (kh√¥ng ph·∫£i f1)
        uploaded_f2 = next((f for f in uploaded_files if f != uploaded_f1 and f.name.lower().endswith(".txt")), None)

        if uploaded_f1 and uploaded_f2 and uploaded_f3:
            try:
                df1 = pd.read_csv(uploaded_f1, sep='\t', encoding='cp1252')
                df2 = pd.read_csv(uploaded_f2, sep='\t', encoding='cp1252')
                df_data = pd.read_excel(uploaded_f3, sheet_name="Data")  # Ch·ªâ ƒë·ªçc sheet "Data"
            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc file: {e}")
                st.stop()
            # Dua 2 txt vao excel Data_Tracker.xlsx tu 3 file tai len
            # va tra ve file ao data_tracker_upload da chua them 2 txt   
            data_tracker_upload = Txt_to_data_tracker(df1, df2,df_data)

            # Xu li 2 sheet txt tren data_tracker_upload append vao Data sheet
            # va tra ve tep  Data_Tracker_New de download
            Data_Tracker_New = Combined_to_data_tracker(data_tracker_upload)    

            st.success("‚úÖ ƒê√£ t·∫°o Data_Tracker_New.xlsx tu 3 file tai len.")
            st.download_button(
                label="üì• T·∫£i xu·ªëng file Excel m·ªõi: Data_Tracker_New.xlsx",
                data=Data_Tracker_New,
                file_name="Data_Tracker_New.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.warning("H√£y ƒë·∫£m b·∫£o ƒë√∫ng 1 file ch·ª©a 'industrial_ad_hoc', 1 file .txt c√≤n l·∫°i, v√† 1 file .xlsx ƒë·ªÉ ƒë·∫∑t t√™n")
    else:
        st.info("Vui l√≤ng upload ƒë·ªß 3 file")
    return

#-------------------
def ThucThiPhan_1():
    # cac vung de chon
    regions = st.selectbox("Select a Region:", 
                ("Region 1 - North Coast",
                "Region 2 - San Francisco Bay",
                "Region 3 - Central Coast",
                "Region 4 - Los Angeles",
                "Region 5F - Fresno",
                "Region 5R - Redding",
                "Region 5S - Sacramento",
                "Region 6A - South Lake Tahoe",
                "Region 6B - Victorville",
                "Region 7 - Colorado River Basin",
                "Region 8 - Santa Ana",
                "Region 9 - San Diego"),
                index=None,
                placeholder="No selected Region",
                )
    #neu mot vung duoc chon thi lam
    LOI='OK'
    if regions:
        placeholder_1 = st.empty()
        placeholder_1.write('Wait for downloading 2 files of ' + regions)
        #thuc thi ham download_data_smarts(regions) va tra ve list cac file da tai 
        try :
            lfile_datai = download_data_smarts(regions)
            placeholder_1.write('Downloaded files:')
            st.write(lfile_datai)
        except:
            LOI='LOI'
            placeholder_1.write('Tai file kh√¥ng ƒë·∫°t!')
    if LOI == 'LOI':
        st.write('N·∫øu kh√¥ng ƒë·∫°t, c√≥ th·ªÉ ƒë·∫øn tr·ª±c ti·∫øp trang sau ƒë·ªÉ t·∫£i:')
        st.markdown("[M·ªü trang SMARTS](https://smarts.waterboards.ca.gov/smarts/SwPublicUserMenu.xhtml)", unsafe_allow_html=True)

#========================= MAIN =====================================================================
# TIEU DE APP
st.header('üè∑Ô∏èTr√¨nh h·ªó tr·ª£ qu·∫£n l√Ω m√¥i tr∆∞·ªùng n∆∞·ªõc')

# PHAN 1: TAI FILES TXT DU LIEU DAT VAO EXCEL
#--------------------------------------------
st.subheader('‚úÖ I. Download the data', divider=True)
ThucThiPhan_1()

# Them data moi vao trinh theo doi
#---------------------------------
st.subheader('‚úÖ II. Add the new data to your tracker', divider=True)
ThucThiPhan_2()
# Phan II phai lam cac viec sau:
#####################################################################################################################################################################################################################################################################
# B∆∞·ªõc                                                                    | Gi·∫£i th√≠ch                                                                                                                                                                              |
# ----------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
# **1. Create 2 new sheets**                                              | Trong file Excel ƒëang c√≥ (`SMARTS data tracker.xlsx`), t·∫°o 2 sheet m·ªõi b·∫±ng n√∫t `+`. B·∫°n c√≥ th·ªÉ ƒë·∫∑t t√™n l√† `Sheet1`, `Sheet2` ho·∫∑c t√™n c√≥ nghƒ©a h∆°n (v√≠ d·ª•: `NewData`, `FacilityInfo`). |
# **2. Get Sheet2 into the proper format**                                | Chu·∫©n h√≥a d·ªØ li·ªáu trong `Sheet2` ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·ªãnh d·∫°ng theo d√µi hi·ªán t·∫°i. C√≥ th·ªÉ bao g·ªìm: ƒë·ªïi t√™n c·ªôt, ƒë·ªãnh d·∫°ng ng√†y, x·ª≠ l√Ω tr·ªëng...                                                |
# **3. Get Sheet1 into the proper format**                                | L√†m t∆∞∆°ng t·ª± v·ªõi `Sheet1` ‚Äî chu·∫©n h√≥a d·ªØ li·ªáu m·∫´u, c√≥ th·ªÉ g·ªìm t√™n c·ªôt, ƒë∆°n v·ªã, ƒë·ªãnh d·∫°ng m√£ c∆° s·ªü, ng√†y l·∫•y m·∫´u...                                                                      |
# **4. Filter Sheet1 for only new sample data**                           | L·ªçc `Sheet1` ƒë·ªÉ ch·ªâ gi·ªØ l·∫°i d·ªØ li·ªáu m·ªõi (ch∆∞a c√≥ trong tracker). C√≥ th·ªÉ d√πng c·ªôt "Sample Date" ho·∫∑c "Entry Date" ƒë·ªÉ x√°c ƒë·ªãnh m·ªõi/c≈©.                                                    |
# **5. Check if facilities in Sheet1 are active**                         | Ki·ªÉm tra xem c√°c c∆° s·ªü trong `Sheet1` c√≤n ho·∫°t ƒë·ªông hay kh√¥ng (so v·ªõi danh s√°ch c∆° s·ªü ƒëang ho·∫°t ƒë·ªông). C√≥ th·ªÉ d·ª±a v√†o c·ªôt "Status" ho·∫∑c tra c·ª©u ch√©o t·ª´ `Sheet2`.                       |
# **6. Choose the parameters to track in Sheet1**                         | Ch·ªçn nh·ªØng th√¥ng s·ªë m√¥i tr∆∞·ªùng c·∫ßn theo d√µi (v√≠ d·ª•: pH, TSS, Oil & Grease...), kh√¥ng c·∫ßn gi·ªØ t·∫•t c·∫£.                                                                                    |
# **7. Make sure all the samples in Sheet1 are in ‚Äúmg/L‚Äù and not ‚Äúug/L‚Äù** | Chuy·ªÉn ƒë·ªïi ƒë∆°n v·ªã ƒëo: n·∫øu c√≥ d√≤ng n√†o ƒëang ·ªü "¬µg/L" (microgram), chuy·ªÉn v·ªÅ "mg/L" (milligram) cho ƒë·ªìng nh·∫•t. Th∆∞·ªùng chia gi√° tr·ªã cho 1,000.                                             |
# **8. Add facility information from Sheet2 into Sheet1**                 | D√πng `Sheet2` ƒë·ªÉ b·ªï sung th√¥ng tin c∆° s·ªü (t√™n, ƒë·ªãa ch·ªâ, v.v.) v√†o `Sheet1`. C√≥ th·ªÉ d√πng `VLOOKUP` ho·∫∑c `merge` theo `Facility ID`.                                                      |
# **9. Add in SIC Codes from Sheet2 into Sheet1**                         | Th√™m m√£ ng√†nh (SIC code) t·ª´ `Sheet2` v√†o `Sheet1`, c≈©ng theo `Facility ID`.                                                                                                             |
# **10. Combine new data from Sheet1 into existing Data tracker**         | G·ªôp (append) d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω trong `Sheet1` v√†o sheet `Data` g·ªëc trong tracker. ƒê·∫£m b·∫£o kh√¥ng th√™m tr√πng d√≤ng ƒë√£ c√≥ tr∆∞·ªõc ƒë√≥.                                                          |
#####################################################################################################################################################################################################################################################################


# Phan tich du lieu
st.subheader('‚úÖ III. Analyze the new data', divider=True)
ThucThiPhan_3()
#-------------------------------------------------------
# 1. S·∫Øp x·∫øp d·ªØ li·ªáu theo nhi·ªÅu c·∫•p ƒë·ªô (multi-level sort):
#df_sorted = df.sort_values(
#    by=["Old/New", "Parameter", "Result"],
#    ascending=[True, True, False]
#)
# 2. L·ªçc d·ªØ li·ªáu c√≥ Old/New == 'New':
#df_new = df_sorted[df_sorted["Old/New"] == "New"]
# 3. T√¥ m√†u (highlight) exceedances th√¨ kh√¥ng th·ªÉ hi·ªÉn th·ªã trong DataFrame th√¥ng th∆∞·ªùng nh∆∞ng c√≥ th·ªÉ d√πng:
# pandas.ExcelWriter + openpyxl ƒë·ªÉ ghi file Excel c√≥ m√†u.
# Ho·∫∑c ƒë∆°n gi·∫£n ch·ªâ ƒë√°nh d·∫•u b·∫±ng c·ªôt m·ªõi "Exceed" = True/False
# 4. So s√°nh k·∫øt qu·∫£ v·ªõi ng∆∞·ª°ng NAL/NEL/TNAL:
# tao dic chua nguong
# nal_thresholds = {
#    "Ammonia": 4.7,
#    "Cadmium": 0.0031,
#    "Copper": 0.06749,
#    # v.v...
#}
# R·ªìi ki·ªÉm tra:
#def is_exceed(row):
#    param = row["Parameter"]
#    result = row["Result"]
#    return result > nal_thresholds.get(param, float('inf'))
# df_new["Exceed"] = df_new.apply(is_exceed, axis=1)
# 5. Ghi ch√∫ c√°c facility c·∫ßn theo d√µi ‚Üí b·∫°n c√≥ th·ªÉ l·ªçc ho·∫∑c th√™m c·ªôt "Flagged" d·ª±a v√†o danh s√°ch th·ªß c√¥ng.


# Do thi hoa du lieu
st.subheader('‚úÖ IV. Visualize the data', divider=True)
ThucThiPhan_4()

st.markdown("[M·ªü trang SMARTS](https://smarts.waterboards.ca.gov/smarts/SwPublicUserMenu.xhtml)", unsafe_allow_html=True)
